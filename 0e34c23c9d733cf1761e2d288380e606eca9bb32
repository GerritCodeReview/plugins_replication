{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "af66ccfa_cd09210b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationTasksStorage.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-02T22:08:35Z",
      "side": 1,
      "message": "I don\u0027t believe there is a legal situation when create(file) should even return a null. All tasks should be created in the \"building/\" directory and then moved to the \"waiting/\" directory so that they are never \"partial\". If these are happening in the \"running/\" directory it is even weirder. It might be worth tracking down the source of this \"instability\" instead of covering it up silently (which is what this change does).",
      "range": {
        "startLine": 67,
        "startChar": 35,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "0e34c23c9d733cf1761e2d288380e606eca9bb32",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0878247_ec573fbb",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationTasksStorage.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-11-02T23:02:58Z",
      "side": 1,
      "message": "The test case that trigger this (com.googlesource.gerrit.plugins.replication.ReplicationStorageIT.shouldCleanupTasksAfterNewProjectReplication) runs listRunning() quickly in a loop waiting for it to return no results because we\u0027re waiting for a task to be cleaned up from running.\n\nThe relevant test code is:\n\n     assertThat(listRunning()).hasSize(0);\n     Project.NameKey sourceProject \u003d createTestProject(\"task_cleanup_project\");\n \n     WaitUtil.waitUntil(\n         () -\u003e nonEmptyProjectExists(Project.nameKey(sourceProject + \"replica.git\")),\n         TEST_NEW_PROJECT_TIMEOUT);\n     WaitUtil.waitUntil(() -\u003e listRunning().size() \u003d\u003d 0, TEST_TASK_FINISH_TIMEOUT);\n\nand\n\n   private List\u003cReplicateRefUpdate\u003e listRunning() {\n     return tasksStorage.streamRunning().collect(Collectors.toList());\n   }\n\n\nSo we know there were no bogus/broken task files in listRunning() output initially. createTestProject() should create one task in building/, move it to waiting, then move it to running/ and finally delete it. *Somehow*, when we\u0027re looping (and I don\u0027t know on which iteration) looking at listRunning(), the file ends up empty. I know it\u0027s empty (vs null) because line 77 must be returning a valid String object or we\u0027d get some error in that constructor. GSON.fromJSON only returns null if the \u0027json\u0027 passed in is empty or null. So we read all the bytes of the file and get an empty String.\n\nLooking at https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#readAllBytes-java.nio.file.Path-, it\u0027s not clear what happens if someone deletes the file as we\u0027re reading it. It could throw an IOException, but we\u0027re not seeing that. Googling doesn\u0027t give me any hits as to why we\u0027re getting an empty String here. I could definitely add a check for the empty String and log it, but I don\u0027t know why it\u0027s happening and I agree there\u0027s no code path that makes sense to me other than \"Files.readAllBytes is doing something undocumented when reading a file we\u0027re deleting/just deleted\".\n\nAlso, nothing seems to throw NoSuchFileException in this path, so I don\u0027t know why we\u0027re catching that.",
      "parentUuid": "af66ccfa_cd09210b",
      "range": {
        "startLine": 67,
        "startChar": 35,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "0e34c23c9d733cf1761e2d288380e606eca9bb32",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c05b460a_1427afc0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationTasksStorage.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-03T00:24:54Z",
      "side": 1,
      "message": "\u003e Looking at https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#readAllBytes-java.nio.file.Path-, it\u0027s not clear what happens if someone deletes the file as we\u0027re reading it. It could throw an IOException, but we\u0027re not seeing that. Googling doesn\u0027t give me any hits as to why we\u0027re getting an empty String here. I could definitely add a check for the empty String and log it, but I don\u0027t know why it\u0027s happening and I agree there\u0027s no code path that makes sense to me other than \"Files.readAllBytes is doing something undocumented when reading a file we\u0027re deleting/just deleted\".\n\nI agree it\u0027s likely something like that.\n \n\u003e Also, nothing seems to throw NoSuchFileException in this path, so I don\u0027t know why we\u0027re catching that.\n\nIt\u0027s an IOException, so it\u0027s hard to tell when its thrown. The intent is to differentiate it in the logs (not an error) from an IOException because it is expected that tasks can get deleted while we are listing them.",
      "parentUuid": "a0878247_ec573fbb",
      "range": {
        "startLine": 67,
        "startChar": 35,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "0e34c23c9d733cf1761e2d288380e606eca9bb32",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20b3f2ed_259d0787",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationTasksStorage.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-11-05T19:23:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c05b460a_1427afc0",
      "range": {
        "startLine": 67,
        "startChar": 35,
        "endLine": 67,
        "endChar": 47
      },
      "revId": "0e34c23c9d733cf1761e2d288380e606eca9bb32",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}