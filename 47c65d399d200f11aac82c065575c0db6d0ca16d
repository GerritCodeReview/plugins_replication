{
  "comments": [
    {
      "key": {
        "uuid": "cd6ffe04_d9c2bca3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationModule.java",
        "patchSetId": 14
      },
      "lineNbr": 85,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2020-03-25T13:15:50Z",
      "side": 1,
      "message": "... the @Singleton annotation is removed from this class but here the SINGLETON scope is\nmissing? However, in the line 91 this class is bound with the SINGLETON scope?\nWhat\u0027s the motivation behind all of this? Why not keep the @Singleton annotation\non the ReplicationFileBasedConfig?",
      "revId": "47c65d399d200f11aac82c065575c0db6d0ca16d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc64a6c0_4187bec9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationModule.java",
        "patchSetId": 14
      },
      "lineNbr": 85,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-03-25T14:11:57Z",
      "side": 1,
      "message": "I had to remove @Singleton annotation because of how Guice works. If the class is marked as a singleton even Provider\u003cReplicationConfig\u003e is returning the same instance. Please have in mind that in AutoReloadRunnable line 66 we have to get new instance when we have new configuration version. That\u0027s why for auto reload we cannot mark ReplicationFileBasedConfig as a singleton but we should mark AutoReloadConfigDecorator instead.",
      "parentUuid": "cd6ffe04_d9c2bca3",
      "revId": "47c65d399d200f11aac82c065575c0db6d0ca16d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7824fd40_b10f7dc0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/VanillaReplicationConfig.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2020-03-25T12:51:19Z",
      "side": 1,
      "message": "I like this name even less than ReplicationConfigImpl. This name suggests that the\nimplementation of ReplicationConfig annotated with @VanillaReplicationConfig is a kind of\ndefault/simple replication config implementation. However, if I follow correctly, this is\nnot the purpose of this annotation. The real purpose is to inject the chosen ReplicationConfig\nimplementation into the AutoReloadConfigDecorator.\n\nTo give an example, imagine we have two ReplicationConfig implementations (file and DB based):\n* ReplicationFileBasedConfig\n* RepllicationDbBasedConfig\n\nBased on a parameter, maybe a system property because we cannot use replication.config for that, we pick one of the implementations to use:\n\n  -Dreplication.config.impl\u003dcom.googlesource.gerrit.plugins.repication.ReplicationDbConfig\n\nNow, in the ReplicationModule we have to check that system property and bind the configured\nimplementation\n\n  String className \u003d System.getProperty(\"replication.config.impl\");\n  bind(ReplicationConfig.class)\n          .annotatedWith(VanillaReplicationConfig.class)\n          .to(Class.forName(className));\n\nObviously, the usage of the Vanilla... annotation name is wrong.\nWhat this annotation represents is the currently configured replication configuration implementation. Therefore, the ReplicationConfigImpl is a better name for this purpose\neven if it is not perfect... however ATM I don\u0027t have a better proposal.",
      "range": {
        "startLine": 23,
        "startChar": 18,
        "endLine": 23,
        "endChar": 42
      },
      "revId": "47c65d399d200f11aac82c065575c0db6d0ca16d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}