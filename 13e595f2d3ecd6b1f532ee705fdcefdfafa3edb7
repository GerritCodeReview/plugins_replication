{
  "comments": [
    {
      "key": {
        "uuid": "OfgQLNuY",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2013-01-17T21:19:34Z",
      "side": 1,
      "message": "This a cool change.  Unfortunately, there are failed to lock cases which are not transient: when a ref is a \"directory\" (imagine the mirror has a ref named \u0027foo/bar\u0027 and the push is on the ref \u0027foo\u0027) on the receiving end.  You will need to somehow be able to detect those cases or else they will fill up the queue forever.",
      "revId": "13e595f2d3ecd6b1f532ee705fdcefdfafa3edb7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "OgQHxqiU",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1010362
      },
      "writtenOn": "2013-01-17T22:39:43Z",
      "side": 1,
      "message": "So I just understand: You mean that if I push \"refs/heads/test\" to a git-daemon and the mirror have a ref named \"refs/head/test/abc\", the git daemon would throw a \"failed to lock\" error? Would Gerrit give the same error during a push in the same circumstances? If so, is there really any real world use-cases where we can expect to really run into this error when working with Gerrit slaves?\n\nThis is certainly no issue for us though... But I will do some further testing tomorrow.",
      "parentUuid": "OfgQLNuY",
      "revId": "13e595f2d3ecd6b1f532ee705fdcefdfafa3edb7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Oe8eJHoA",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushOne.java",
        "patchSetId": 3
      },
      "lineNbr": 282,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2013-01-17T19:28:58Z",
      "side": 1,
      "message": "[optional] Have a LockFailureException as subclass of RemoteRepositoryException so that above you can simply check with instanceof without need to check on the message.",
      "revId": "13e595f2d3ecd6b1f532ee705fdcefdfafa3edb7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}