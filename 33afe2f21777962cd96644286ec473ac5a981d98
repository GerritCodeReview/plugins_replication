{
  "comments": [
    {
      "key": {
        "uuid": "0380bd5a_a68ac1bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-06-12T09:11:02Z",
      "side": 1,
      "message": "by decomposing it into",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbdda218_f97fe685",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-12T17:20:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0380bd5a_a68ac1bf",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 9,
        "endChar": 59
      },
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00778c49_6f9a697c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadConfigDecorator.java",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-06-07T16:48:16Z",
      "side": 1,
      "message": "nit: this is only declared in the interface, but is never thrown by this method",
      "range": {
        "startLine": 124,
        "startChar": 62,
        "endLine": 124,
        "endChar": 91
      },
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "373df5d5_d6d91041",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadConfigDecorator.java",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-12T18:43:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "00778c49_6f9a697c",
      "range": {
        "startLine": 124,
        "startChar": 62,
        "endLine": 124,
        "endChar": 91
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6fb3dde_052e9d80",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-06-12T09:50:33Z",
      "side": 1,
      "message": "Why do we need to inject Provider here?",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3daaef1_8e595e94",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-12T17:20:50Z",
      "side": 1,
      "message": "Because you don\u0027t know up-front who is going to be the implementation of that listener and, if the implementer has a dependency on AutoReloadRunnable, then you\u0027ll have a circular dependency.\n\nThat is actually the case for the AutoReload dectorator ;-)",
      "parentUuid": "a6fb3dde_052e9d80",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6c7bcec_21710783",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-13T09:28:11Z",
      "side": 1,
      "message": "No more comments, I assume this is fine :-)",
      "parentUuid": "b3daaef1_8e595e94",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "006afa7f_8b1cb1dc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-06-12T09:11:02Z",
      "side": 1,
      "message": "Isn\u0027t lastVersion always equal to the configVersion? When entering the run method for the first time the configVersion is set to config.getVersion() from the line 45.\n\nIf the config changes (line 61) the configVersion also changes (line 62), so we can use just configVersion here.\n\nFurther, why have configVersion variable at all when we can always use config.getVersion()?",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68801753_9a204f15",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-12T17:20:50Z",
      "side": 1,
      "message": "\u003e Isn\u0027t lastVersion always equal to the configVersion? When entering the run method for the first time the configVersion is set to config.getVersion() from the line 45.\n\nconfig.getVersion() get the version of the config from the filesystem, whilst configVersion is the version when the Runner was created or the last time the configuration was reloaded.\n\nPossibly config.getVersion() should be renamed config.getLatestVersion()?\n\n\u003e If the config changes (line 61) the configVersion also changes (line 62), so we can use just configVersion here.\n\u003e \n\u003e Further, why have configVersion variable at all when we can always use config.getVersion()?\n\nNope, we need to remember the version of when the config was loaded and check with the one on the filesystem.",
      "parentUuid": "006afa7f_8b1cb1dc",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d107b465_f5f42b79",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-06-13T09:07:58Z",
      "side": 1,
      "message": "Then the naming of the variables needs to be improved. Maybe:\n\n  config \u003e loadedConfig\n  configVersion \u003e loadedConfigVersion\n  lastVersion \u003e pendingConfigVersion",
      "parentUuid": "68801753_9a204f15",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08363a42_d444e3b6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-13T09:28:11Z",
      "side": 1,
      "message": "Yes, agreed. Let me apply your suggestions, thanks for the feedback.",
      "parentUuid": "d107b465_f5f42b79",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ed80890_f2b86dfa",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/AutoReloadRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-13T11:46:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08363a42_d444e3b6",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f9c4cb1_6e50f4dd",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-06-07T16:48:16Z",
      "side": 1,
      "message": "This is only triggered before the replication.config is about to be *re*loaded. It is not called the first time the configuration is loaded.\nI think the name should be more consistent to what the method does.\n\nSame applies to afterLoad",
      "range": {
        "startLine": 23,
        "startChar": 1,
        "endLine": 27,
        "endChar": 56
      },
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7c3221c_f623f185",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-12T17:20:50Z",
      "side": 1,
      "message": "True, should be called beforeReload()",
      "parentUuid": "9f9c4cb1_6e50f4dd",
      "range": {
        "startLine": 23,
        "startChar": 1,
        "endLine": 27,
        "endChar": 56
      },
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1948f895_5875b035",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-12T18:43:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7c3221c_f623f185",
      "range": {
        "startLine": 23,
        "startChar": 1,
        "endLine": 27,
        "endChar": 56
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e000a0f_5dc0692a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-06-12T09:11:02Z",
      "side": 1,
      "message": "Maybe not a topic of this change but this looks like too concrete type for the replication config. Now that we are splitting the detection that the configuration changed from\nthe usage of the replication configuration, we could also abstract out how the replication\nconfiguration is stored and (re)loaded.",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 43
      },
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82c42f4e_aa7ab0c3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-06-12T09:11:02Z",
      "side": 1,
      "message": "Why before/after methods? Why assume that all listeners have to be implemented that way?\n\nI propose just one method:\n\n  void onReload(ReplicationFileBasedConfig oldConfig, ReplicationFileBasedConfig newConfig)\n\nIMHO, this would be a much better interface as it leave more freedom to the listener implementations.",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90f237e8_c7dfa0ee",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-12T17:20:50Z",
      "side": 1,
      "message": "Yes, but for making this change as small as possible I avoided to put too much meat on the barbecue :-)\n\nIt can be addressed in a follow-up change in the series IMHO.",
      "parentUuid": "5e000a0f_5dc0692a",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 43
      },
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "832c7ea0_ddf53aa4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-12T17:20:50Z",
      "side": 1,
      "message": "The idea was that \"before\" could potentially prevent the reload to happen, whilst the \"after\" can\u0027t do anything about it and is just informed of what happened.\n\nNot sure if I could implement the same logic with the onReload()",
      "parentUuid": "82c42f4e_aa7ab0c3",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50647a40_b95d1004",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-06-13T09:07:58Z",
      "side": 1,
      "message": "\u003e The idea was that \"before\" could potentially prevent the reload to happen, whilst the \"after\" can\u0027t do anything about it and is just informed of what happened.\n\nWhy then afterReload declares a thrown exception and beforeReload not?\n\n\u003e Not sure if I could implement the same logic with the onReload()\n\nLook at the (currently) only implementation of this interface which is the AutoReloadConfigDecorator and assume we change it to:\n\n  void onReload(oldCfg, newCfg) {\n    beforeReload(oldCfg);\n    afterReload(newCfg);\n  }\n\nIt would still do the same thing but this is still not the main point of this discussion.\n\nImagine we want a really smart reload which restarts only those destination which really changed! Assume we have 10 destinations and the replication.config is changed so that\nonly one destination is affected by the change. A smart implementation would keep the 9\nunaffected destinations running and only restart the changed one. However, to find out\nwhich destinations have changed we need both the old and the new config. This is possible\nwith the onReload method:\n\n  void onReload(oldCfg, newCfg) {\n    changedDestinations \u003d compare(oldCfg, newCfg);\n    restart(changedDestinations);\n  }\n\nWith the beforeReload/afterReload we cannot do that unless we do nothing in the beforeReload\nand just store the oldCfg, then wait for the afterReload call and only then proceed with\nthe restart logic.",
      "parentUuid": "832c7ea0_ddf53aa4",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63141676_5b038ce5",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-13T09:28:11Z",
      "side": 1,
      "message": "\u003e Imagine we want a really smart reload which restarts only those destination which really changed! Assume we have 10 destinations and the replication.config is changed so that\n\u003e only one destination is affected by the change. A smart implementation would keep the 9\n\u003e unaffected destinations running and only restart the changed one. However, to find out\n\u003e which destinations have changed we need both the old and the new config. This is possible\n\u003e with the onReload method:\n\u003e \n\u003e   void onReload(oldCfg, newCfg) {\n\u003e     changedDestinations \u003d compare(oldCfg, newCfg);\n\u003e     restart(changedDestinations);\n\u003e   }\n\n\nThat\u0027s a very good point. Actually, we have a huge number of destinations on GerritHub.io and having that logic would *minimize the disruption* of the replication.config reloads.\n\nI\u0027ll take your suggestion and change the interface.",
      "parentUuid": "50647a40_b95d1004",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ccde968_2552d4d1",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationConfigListener.java",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-13T11:46:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63141676_5b038ce5",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e13e76e4_55b7486c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationFileBasedConfig.java",
        "patchSetId": 3
      },
      "lineNbr": 314,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-06-12T09:11:02Z",
      "side": 1,
      "message": "optional: sha1 hash of the content is probably a better candidate as it would prevent unnecessary (re)load and restart of destinations when only the last modified changes but\nthe content remains identical.",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "719b5c0f_f9d6c6eb",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationFileBasedConfig.java",
        "patchSetId": 3
      },
      "lineNbr": 314,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-12T17:20:50Z",
      "side": 1,
      "message": "True, however, I wanted to keep the existing logic for now: before this change, a touch of the replication config was causing the reload.\n\nI typically never mix refactoring with a change in functionality :-)",
      "parentUuid": "e13e76e4_55b7486c",
      "revId": "33afe2f21777962cd96644286ec473ac5a981d98",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}