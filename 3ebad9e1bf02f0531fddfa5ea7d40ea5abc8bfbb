{
  "comments": [
    {
      "key": {
        "uuid": "692a2415_a8a0093b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-18T14:13:25Z",
      "side": 1,
      "message": "Isn\u0027t we are doing here way too much, and we create allDestination, that we don\u0027t use, but ionly inteested in a side effect? We only want to check the validity of the new config file content. Wouldn\u0027t this be enough:\n\n    try {\n      configuration.getConfig().load();\n    } catch (ConfigInvalidException e) {\n      throw new ConfigInvalidException(\n          String.format(\n              \"Config file %s is invalid: %s\", configuration.getConfig().getFile(), e.getMessage()),\n          e);\n    }\n\nThat way we wouldn\u0027t need to change the signatur of allDestinations()-method and pass different instances of ReplicationFileBasedConfig: in one case instance variable replicationConfig inline 82 above and in another case a new config passed from AutoReloadRunnable#reload() method.",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "047230c6_728a9dd6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-09-18T15:38:54Z",
      "side": 1,
      "message": "This is good point, creation of all destinations (see the line 307) and also see\nwhat happens in the Destinations constructor, seems really too much.\n\nOn the other side, I think we want to check more that just syntax correctness of the new\nconfiguration. I think that Luca wants to make sure that the destinations are properly\nconfigured i.e. all required properties are present and valid.\n\nTherefore, I believe that the validation checks should be extracted out of allDestinations\nso that the validation can be performed without actually creating destinations.",
      "parentUuid": "692a2415_a8a0093b",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "059ccfbc_1bedff7d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-09-18T15:42:01Z",
      "side": 1,
      "message": "Yes, I believe we need a change *before* this where we de-couple the validation of the destinations from their actual creation.",
      "parentUuid": "047230c6_728a9dd6",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5907b990_08229708",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-09-18T15:56:35Z",
      "side": 1,
      "message": "I believe that just checking the configuration is valid is not enough:\nWe want to make sure that the _new_ configuration file if semantically fit to generate a new set of destinations.\n\n\u003e Therefore, I believe that the validation checks should be extracted out of allDestinations so that the validation can be performed without actually creating destinations.\n\nsome validations _are_ checks based on Destination objects themselves after they have been created, see DestinationsCollection.java L312 for example.",
      "parentUuid": "059ccfbc_1bedff7d",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c1cb873_9fc23296",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-09-18T16:31:22Z",
      "side": 1,
      "message": "Checking all callers to the allDestinations method, I still believe that destinations are\ncreated more often than necessary:\n* from the constructor of the DestinationsCollection\n* from the DestinationsCollection.onReload method\n* from the DestinationsCollection.validateConfig\n\nI haven\u0027t debugged it yet but it looks like when replication.config changes all destinations\nwill be created at least twice during the configuration reload. Considering that this is\na relatively expensive operation, it would make sense to extract the validation logic\nand try to perform the validation without actually having to create Destination objects.",
      "parentUuid": "5907b990_08229708",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1586f72b_bb8017b6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-18T17:01:51Z",
      "side": 1,
      "message": "I would also add that we could be smarter, then just wiping out all destinations and re-creating them all from scratch on each and every re-load operation. We could do some kind of diffing of current and new configurations. Or, we could support in place patching, by providing a patch file with one single new or changed destination.\n\nSay we have 10K destinations on huge gerrit site. Now, we add one single new destination. With this change at least 10K * 2 + 2 destinations are going to be created. What is the run time implication of this would be?",
      "parentUuid": "8c1cb873_9fc23296",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebc5b3eb_db3497c9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2019-09-19T09:07:29Z",
      "side": 1,
      "message": "Thanks for your feedbacks Sa≈°a and David.\nI appreciate both your points, but I think there\u0027e room for discussion about some of those subjects:\n\n\u003e I haven\u0027t debugged it yet but it looks like when replication.config changes all destinations\n\u003e will be created at least twice during the configuration reload. Considering that this is\n\u003e a relatively expensive operation, it would make sense to extract the validation logic\n\u003e and try to perform the validation without actually having to create Destination objects.\n\nYes I agree. however looking deeper you\u0027ll notice how the expensive operation is not really the creation of the destinations, but the _validation_ of the configuration itself, which happens during the creation of DestinationConfiguration objects.\nIn that process we check the syntax is correct, mandatory sections exists, remotes are valid, name placeholders are correct, etc.\n\nEven if we extracted this logic elsewhere, the creation of those DestinationConfiguration objects will still need to occur twice:\n- Once, in the validateConfig() to validate the configuration\n- Once, in allDestinations() to get the destinationConfiguration to build new destinations upon.\n\nas such:\n\n  @Override\n  public void validateConfig(ReplicationFileBasedConfig newConfig) throws ConfigInvalidException {\n    buildConfigurations(newConfig);\n  }\n\n  public List\u003cDestinationConfiguration\u003e buildConfigurations(ReplicationFileBasedConfig configuration) throws ConfigInvalidException {\n   //... all validation checks here\n   return List\u003cDestinationConfiguration\u003e\n  }\n\nNow, to build Destinations, destinationCollections() should either call buildConfigurations() again, or be passed one [2].\n\n[1]\n  destinationCollections(Destination.Factory destinationFactory, ReplicationFileBasedConfig configuration) {\n     buildConfigurations(newConfig);\n     // build destinations, trivially\n  }\n\n[2]\n  destinationCollections(Destination.Factory destinationFactory, List\u003cDestinationConfiguration\u003e destinationConfigurations) {\n    // build destinations, trivially\n  }\n\nIn both cases, validation process will occur twice.\n\n\nAn alternative is that validateConfig would mutate DestinationCollection by storing the new, valid list of DestinationConfiguration, so that onReload() can just build on that, without having to recompute all validations. This would allow only one validation to happen.\nHaving said that, I would argue that validateConfig() should not perform any side effect at all.\n\n\n\n\u003e we could be smarter, then just wiping out all destinations and re-creating them all from scratch on each and every re-load operation.\n\nI agree the reload could be smarter, but this logic is beyond the simple introduction of validation. I am happy to work on this on a follow up change.\n\n\u003e Now, we add one single new destination. With this change at least 10K * 2 + 2 destinations are going to be created. What is the run time implication of this would be?\n\nSee above, I think the expensiveness of the operation is related to the validation of the destinations, not their creation.",
      "parentUuid": "1586f72b_bb8017b6",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14e0b184_811f395d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-19T09:48:38Z",
      "side": 1,
      "message": "So may be listener approach and do-it-twice is bad idea in the first place (Unless we implemented a smarter re-load approach like patching of only small chunks of config or build a difference between old a new config and applying them on current destinations list)?\n\nWhat about a new plan: We support commit/rollback operation (like in the database). If commit of the new config version failed  to recover from an attempt to reload invalid configuration, so something like that:\n\n* AutoReloadRunnable detects new config version, store the valid config instance in local instance variable and post an event to reload the configuration.\n* DestinationsCollection that subscribed to this event, got the event and attempts to load new config and replace the destinations list instance. If it was OK, then commit event is posted, otherwise rollback event is posted. Note, that the current, a valid destinations instance is not mutated in case reload process failed!\n* AutoReloadRunnable got rollback event: new config version is discarded, and old one is restored as the current one.\n* AutoReloadRunnable got commit event: old config version is discared, new one is promoted to the current one.",
      "parentUuid": "ebc5b3eb_db3497c9",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "feefec1c_9ac547f3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-09-19T09:53:35Z",
      "side": 1,
      "message": "How many *times a second* are we expecting to reload the configuration?\nThe reload itself would imply the a replay of events that may take many many minutes, if not hours.\nWhilst is reloading, we do not accept further reloads.\n\nI do agree with the issue of validating the configuration twice, however, it can be easily addressed as a follow-up change and just making it differential:\n- Understand what has changed\n- Apply the differences\n\nWDYT?",
      "parentUuid": "14e0b184_811f395d",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff7f473d_2f97a480",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/DestinationsCollection.java",
        "patchSetId": 40
      },
      "lineNbr": 253,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-19T09:58:26Z",
      "side": 1,
      "message": "Have you read my comments? I am against of double instantiation of Destination instances for purpose of validation. I suggested an alternative approach how we can avoid that. Already in this change, without adding smarter comparisson old/new config approach.",
      "parentUuid": "feefec1c_9ac547f3",
      "range": {
        "startLine": 253,
        "startChar": 4,
        "endLine": 253,
        "endChar": 51
      },
      "revId": "3ebad9e1bf02f0531fddfa5ea7d40ea5abc8bfbb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}