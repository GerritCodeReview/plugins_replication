{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "569356ba_0c8f364e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-24T01:04:10Z",
      "side": 1,
      "message": "Approving, we have the equivalent change also on the pull-replication plugin.",
      "revId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9aed6f7_5c06661a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 307,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-17T00:10:19Z",
      "side": 1,
      "message": "Hmm, is this racy? i.e. if someone triggers a reload after `poll()` but before `fire()`, do we lose the event?\n\nIf yes, we do have a concurrent queue here, so I think it would be safe to get an iterator and remove from the queue after firing.",
      "revId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "619ce09f_0bf5ac10",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 307,
      "author": {
        "id": 1161425
      },
      "writtenOn": "2023-11-21T08:32:57Z",
      "side": 1,
      "message": "Thank you Nasser, in case the plugin is restarted before `fire()`, the queue will obviously become empty, losing the event.\n\nWhen the plugin is reloaded instead, as you say we could lose the event if that happens between the `poll()` and the `fire()`, on the other hand, if the plugin is constantly being reloaded, we might end up in a situation where the event is finally `fired` at a much later time than it was intended to, actually causing to possibly send an old ref value.\nWDYT?",
      "parentUuid": "f9aed6f7_5c06661a",
      "revId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8108dec9_55fe87a5",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 307,
      "author": {
        "id": 1161425
      },
      "writtenOn": "2023-11-23T21:57:18Z",
      "side": 1,
      "message": "@nasser.grainawi@linaro.org any thoughts on this comment?",
      "parentUuid": "619ce09f_0bf5ac10",
      "revId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9837d329_6cf5bcda",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 307,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-24T01:05:06Z",
      "side": 1,
      "message": "\u003e @nasser.grainawi@linaro.org any thoughts on this comment?\n\nMy 2c: if the plugin is reloaded, the in-memory data is lost anyway. So, even if we keep the element in the queue, the reloaded plugin will start with an empty memory area.",
      "parentUuid": "8108dec9_55fe87a5",
      "revId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b62f2d4_ce9a0a3e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 307,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-25T00:21:39Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9837d329_6cf5bcda",
      "revId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ca572c_9afa6bc2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 307,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-28T00:25:52Z",
      "side": 1,
      "message": "\u003e Nasser any thoughts on this comment?\n\nSorry, I was on vacation last week.\n\n\u003e we might end up in a situation where the event is finally fired at a much later time than it was intended to, actually causing to possibly send an old ref value.\n\nWhat do you mean \"send an old ref value\"? We would call fire() with the UpdatedRef set, but if you look at line 172 where those are used, we only use the ref names. Even if we did use them, if we weren\u0027t sanity checking to see if the event was stale, I think that would be buggy. So I don\u0027t see any downside to the approach I suggested.\n\n\u003e My 2c: if the plugin is reloaded, the in-memory data is lost anyway. So, even if we keep the element in the queue, the reloaded plugin will start with an empty memory area.\n\nThis doesn\u0027t make sense to me. The whole bug report is about the plugin auto-reloading due to config changes. If that clears the in-memory data, how does the bug exist?",
      "parentUuid": "1b62f2d4_ce9a0a3e",
      "revId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b97780f_7d1880df",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-17T00:10:19Z",
      "side": 1,
      "message": "Not related to your code, but I noticed that we\u0027re creating a key that\u0027s nearly identical to the AutoValue `ReferencesUpdatedEvent` class. Isn\u0027t the whole point of AutoValue that we can use it directly in a case like this?",
      "range": {
        "startLine": 308,
        "startChar": 13,
        "endLine": 308,
        "endChar": 21
      },
      "revId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c7c36d62cf61d1588e9cdeab3e89b77a65f44c79",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}