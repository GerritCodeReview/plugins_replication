{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6158cc87_ce043bdc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-05T18:01:35Z",
      "side": 1,
      "message": "It is my understanding that other plugins will not be able to provide implementations for this unless this DynamicItem declaration (line 191) is done in core? If this is not the case, can you upload an example to the cookbook plugin which illustrates how this could be used? Also, can you add a test case to show this being replaced and working?",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "192830c9_4aea251a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-05T19:57:46Z",
      "side": 1,
      "message": "It is not that any other plugin will use it. It is a part of child injector that is Destination specific. IOW common replication objects are kept common but instances (e.g. PushOne, UpdateHead, etc...) that are destination specific are created in a dedicated namespace.\nDynamicItem was used here (at least this is my impression after reading related commit message ;)) so that there is a default implementation for community use case but classes that derive from Destination (btw: CollabNet does) could swap AdminApiFactory with different implementation.\nUnfortunately it wasn\u0027t finalised to the extend it could be effectively done as access to the injector is no longer possible after Destination gets created hence the change that we are reviewing now ;)\n\nI\u0027m not changing any existing functionality (after all the same DefaultAdminApiFactory class is used) hence I wasn\u0027t expecting that tests will be required for this change to survive the review but obviously I can do it (preferably in the follow up change) ;).\n\nI would also appreciate some guidance here - I was thinking about a unit test where alternative AdminApiFactory gets provided with mocked AdminApi and some method (e.g. \u0027scheduleDeleteProject\u0027) would be called that results in AdminApi call which would be eventually verified for existence... Would that be reasonable proof of concept?",
      "parentUuid": "6158cc87_ce043bdc",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e690aaef_5c7b6ff1",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-05T20:37:10Z",
      "side": 1,
      "message": "\u003e It is not that any other plugin will use it. It is a part of child injector that is Destination specific. IOW common replication objects are kept common but instances (e.g. PushOne, UpdateHead, etc...) that are destination specific are created in a dedicated namespace.\n\u003e DynamicItem was used here (at least this is my impression after reading related commit message ;)) so that there is a default implementation for community use case but classes that derive from Destination (btw: CollabNet does) could swap AdminApiFactory with different implementation.\n\u003e\n\u003e Unfortunately it wasn\u0027t finalised to the extend it could be effectively done as access to the injector is no longer possible after Destination gets created hence the change that we are reviewing now ;)\n\u003e \n\u003e I\u0027m not changing any existing functionality (after all the same DefaultAdminApiFactory class is used) hence I wasn\u0027t expecting that tests will be required for this change to survive the review but obviously I can do it (preferably in the follow up change) ;).\n\u003e \n\u003e I would also appreciate some guidance here - I was thinking about a unit test where alternative AdminApiFactory gets provided with mocked AdminApi and some method (e.g. \u0027scheduleDeleteProject\u0027) would be called that results in AdminApi call which would be eventually verified for existence... Would that be reasonable proof of concept?\n\nHow is Collabnet replacing classes in a plugin. Is this a fork of the plugin, is the plugin being used from another plugin, is the plugin being used as a library? I think we need such a concept, of how this would be used to be documented in the codebase as a supported option for us to be able to support it. I do not think we should support the idea of adding code that is annotated as used by someone. I think that public documented examples in the code (preferably), or at least in another available plugin should be the expectation. Without this, I don\u0027t see how we can make decisions about how to alter code in a way that won\u0027t break the existing users of the code. That is not a burden that I believe an open source project should have.",
      "parentUuid": "192830c9_4aea251a",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e597581_a48799db",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-05T22:05:18Z",
      "side": 1,
      "message": "I believe also Google uses the @UsedAt annotation, and, so far, we have all accepted it.\nI believe Digital.ai (aka CollabNet) uses a custom replication plugin that uses the replication plugin as a dependency.\n\nThat is pretty much the same approach we have for the pull-replication plugin.\n\n@Jacek can you do something similar to what we\u0027ve done with pull-replication? In that way, it will be evident for the community how to use it, if they want to.",
      "parentUuid": "e690aaef_5c7b6ff1",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db083481_1a48a1ec",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-05T22:29:35Z",
      "side": 1,
      "message": "\u003e How is Collabnet replacing classes in a plugin. Is this a fork of the plugin, is the plugin being used from another plugin, is the plugin being used as a library?\n\nWe add couple commits on the top of the open-source plugin (turn some methods either public or protected but also add functionality that is too controversial for the community to accept it e.g. list of projects to be replicated when server is started ;)) and include it as a library.\n\n\u003e I do not think we should support the idea of adding code that is annotated as used by someone.\n\nI\u0027m not saying that this is a perfect solution but at least it explains why some decisions were made. For the record we have so far 1 other place where \u0027UsedAt\u0027 is used in replication plugin ;)\n\n\u003e I don\u0027t see how we can make decisions about how to alter code in a way that won\u0027t break the existing users of the code\n\nI\u0027m optimistic that we can work it out either through the review or over the slack/zoom/etc when needed :)\n\nI believe so far it was working: doors were opened enough for us to implement our solution in the same time we stayed close enough to the source to be able to contribute back...\n\n@Luca: you mean publish the plugin we build on the top of the replication? I wish I could ;) all I can do is create some documentation on how we actually use the replication plugin and how it differs from the community version provided that it will make sense for the interested parties :D",
      "parentUuid": "e690aaef_5c7b6ff1",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14374d35_20ea944d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-05T22:05:18Z",
      "side": 1,
      "message": "Nit: should this be DIGITALAI?",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e2ca4d3_14a35e67",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-05T22:29:35Z",
      "side": 1,
      "message": "I wasn\u0027t sure it if is worth changing as enum is used in both core and plugins... I can issue a change to core that straightens it and apply it to all affected plugins though...",
      "parentUuid": "14374d35_20ea944d",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}