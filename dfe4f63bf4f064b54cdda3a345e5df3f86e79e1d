{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5eac2ed7_25f09204",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-06T21:10:51Z",
      "side": 1,
      "message": "Sorry, I once again hit the !@#\u0026* shortcut CR+2 button, could someone please remove that anti-feature!",
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6158cc87_ce043bdc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-05T18:01:35Z",
      "side": 1,
      "message": "It is my understanding that other plugins will not be able to provide implementations for this unless this DynamicItem declaration (line 191) is done in core? If this is not the case, can you upload an example to the cookbook plugin which illustrates how this could be used? Also, can you add a test case to show this being replaced and working?",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "192830c9_4aea251a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-05T19:57:46Z",
      "side": 1,
      "message": "It is not that any other plugin will use it. It is a part of child injector that is Destination specific. IOW common replication objects are kept common but instances (e.g. PushOne, UpdateHead, etc...) that are destination specific are created in a dedicated namespace.\nDynamicItem was used here (at least this is my impression after reading related commit message ;)) so that there is a default implementation for community use case but classes that derive from Destination (btw: CollabNet does) could swap AdminApiFactory with different implementation.\nUnfortunately it wasn\u0027t finalised to the extend it could be effectively done as access to the injector is no longer possible after Destination gets created hence the change that we are reviewing now ;)\n\nI\u0027m not changing any existing functionality (after all the same DefaultAdminApiFactory class is used) hence I wasn\u0027t expecting that tests will be required for this change to survive the review but obviously I can do it (preferably in the follow up change) ;).\n\nI would also appreciate some guidance here - I was thinking about a unit test where alternative AdminApiFactory gets provided with mocked AdminApi and some method (e.g. \u0027scheduleDeleteProject\u0027) would be called that results in AdminApi call which would be eventually verified for existence... Would that be reasonable proof of concept?",
      "parentUuid": "6158cc87_ce043bdc",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e690aaef_5c7b6ff1",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-05T20:37:10Z",
      "side": 1,
      "message": "\u003e It is not that any other plugin will use it. It is a part of child injector that is Destination specific. IOW common replication objects are kept common but instances (e.g. PushOne, UpdateHead, etc...) that are destination specific are created in a dedicated namespace.\n\u003e DynamicItem was used here (at least this is my impression after reading related commit message ;)) so that there is a default implementation for community use case but classes that derive from Destination (btw: CollabNet does) could swap AdminApiFactory with different implementation.\n\u003e\n\u003e Unfortunately it wasn\u0027t finalised to the extend it could be effectively done as access to the injector is no longer possible after Destination gets created hence the change that we are reviewing now ;)\n\u003e \n\u003e I\u0027m not changing any existing functionality (after all the same DefaultAdminApiFactory class is used) hence I wasn\u0027t expecting that tests will be required for this change to survive the review but obviously I can do it (preferably in the follow up change) ;).\n\u003e \n\u003e I would also appreciate some guidance here - I was thinking about a unit test where alternative AdminApiFactory gets provided with mocked AdminApi and some method (e.g. \u0027scheduleDeleteProject\u0027) would be called that results in AdminApi call which would be eventually verified for existence... Would that be reasonable proof of concept?\n\nHow is Collabnet replacing classes in a plugin. Is this a fork of the plugin, is the plugin being used from another plugin, is the plugin being used as a library? I think we need such a concept, of how this would be used to be documented in the codebase as a supported option for us to be able to support it. I do not think we should support the idea of adding code that is annotated as used by someone. I think that public documented examples in the code (preferably), or at least in another available plugin should be the expectation. Without this, I don\u0027t see how we can make decisions about how to alter code in a way that won\u0027t break the existing users of the code. That is not a burden that I believe an open source project should have.",
      "parentUuid": "192830c9_4aea251a",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e597581_a48799db",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-05T22:05:18Z",
      "side": 1,
      "message": "I believe also Google uses the @UsedAt annotation, and, so far, we have all accepted it.\nI believe Digital.ai (aka CollabNet) uses a custom replication plugin that uses the replication plugin as a dependency.\n\nThat is pretty much the same approach we have for the pull-replication plugin.\n\n@Jacek can you do something similar to what we\u0027ve done with pull-replication? In that way, it will be evident for the community how to use it, if they want to.",
      "parentUuid": "e690aaef_5c7b6ff1",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db083481_1a48a1ec",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-05T22:29:35Z",
      "side": 1,
      "message": "\u003e How is Collabnet replacing classes in a plugin. Is this a fork of the plugin, is the plugin being used from another plugin, is the plugin being used as a library?\n\nWe add couple commits on the top of the open-source plugin (turn some methods either public or protected but also add functionality that is too controversial for the community to accept it e.g. list of projects to be replicated when server is started ;)) and include it as a library.\n\n\u003e I do not think we should support the idea of adding code that is annotated as used by someone.\n\nI\u0027m not saying that this is a perfect solution but at least it explains why some decisions were made. For the record we have so far 1 other place where \u0027UsedAt\u0027 is used in replication plugin ;)\n\n\u003e I don\u0027t see how we can make decisions about how to alter code in a way that won\u0027t break the existing users of the code\n\nI\u0027m optimistic that we can work it out either through the review or over the slack/zoom/etc when needed :)\n\nI believe so far it was working: doors were opened enough for us to implement our solution in the same time we stayed close enough to the source to be able to contribute back...\n\n@Luca: you mean publish the plugin we build on the top of the replication? I wish I could ;) all I can do is create some documentation on how we actually use the replication plugin and how it differs from the community version provided that it will make sense for the interested parties :D",
      "parentUuid": "e690aaef_5c7b6ff1",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5503274d_b9acb849",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-05T22:36:57Z",
      "side": 1,
      "message": "\u003e \u003e How is Collabnet replacing classes in a plugin. Is this a fork of the plugin, is the plugin being used from another plugin, is the plugin being used as a library?\n\u003e \n\u003e We add couple commits on the top of the open-source plugin (turn some methods either public or protected but also add functionality that is too controversial for the community to accept it e.g. list of projects to be replicated when server is started ;)) and include it as a library.\n\u003e \n\u003e \u003e I do not think we should support the idea of adding code that is annotated as used by someone.\n\u003e \n\u003e I\u0027m not saying that this is a perfect solution but at least it explains why some decisions were made. For the record we have so far 1 other place where \u0027UsedAt\u0027 is used in replication plugin ;)\n\nI believe there are more points in Gerrit core as well:\ngit grep COLLABNET | wc -l\n       4\n\nand Google has way more:\ngit grep GOOGLE | wc -l\n      28\n\nI believe it is worth discussing during the Virtual Summit next week.\n\n[...]\n\n\u003e @Luca: you mean publish the plugin we build on the top of the replication? I wish I could ;) all I can do is create some documentation on how we actually use the replication plugin and how it differs from the community version provided that it will make sense for the interested parties :D\n\nNo, I mean creating an example of how it *could* be extended, as Martin suggested. It should be possible, even a minimalistic one.",
      "parentUuid": "db083481_1a48a1ec",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "376e6a56_777c0e51",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-06T01:16:39Z",
      "side": 1,
      "message": "\u003e I believe also Google uses the @UsedAt annotation, and, so far, we have all accepted it.\n\nI don\u0027t know the specifics here. I do believe it is reasonable to want to be able to see documentation (an implementation) about why something is needed, and I would recommend that this be the standard, even if we have not done so in the past in all occasions. Some of our (Qcom) changes have not done this in the past either, we have mostly rectified this by now, and we would like to know about more places that we should do this if there are any.\n\n\u003e I believe Digital.ai (aka CollabNet) uses a custom replication plugin that uses the replication plugin as a dependency.\n\nCan this be documented on how? Does that mean they run this plugin, or use it as a library (include its code, but doesn\u0027t run the plugin)?\n\n\u003e That is pretty much the same approach we have for the pull-replication plugin.\n\nAt least that plugin is open so that we can look to see how this is done. However, if we can improve things to make shared pieces part of a library with clearer interfaces, that would be welcomed.",
      "parentUuid": "2e597581_a48799db",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c11056a_9444a6af",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-06T21:09:55Z",
      "side": 1,
      "message": "\u003e We add couple commits on the top of the open-source plugin (turn some methods either public or protected but also add functionality that is too controversial for the community to accept it e.g. list of projects to be replicated when server is started ;)) and include it as a library.\n\nThis is not clear to me. Adding commits on top sounds like a \"fork\" of the plugin (we do that too). If you have a fork, It doesn\u0027t seem like there is need for this mechanism since you could just replace these lines in your fork. So I am assuming that for the purposes of the discussion, that the additional commits on top are not related to this code, and that you would like this code to be able to achieve something that does not require additional commits on top? That additional something you are achieving via a library mechanism, and perhaps that is the DynamicItem registering part? Are you making use of this feature to do that? https://gerrit-review.googlesource.com/c/gerrit/+/91605 If not, would making use of that feature make it so that you don\u0027t need this?",
      "parentUuid": "376e6a56_777c0e51",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3256a498_c79dd348",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-06T21:31:21Z",
      "side": 1,
      "message": "I discussed the issue in the past with David and my understanding is that:\n- they are trying to get rid of the fork, by moving all the innovations to core Gerrit, when they are not tied to the IP of their product\n- more than \"fork\" they are rebasing their patches on tip of the stable branches\n\nI believe there is value in discussing the feature and making it more usable by the general community.\n\nWith regards to the UsedAt, it was introduced for avoiding the removal of \"potentially unused\" methods/classes which may break major users of the Gerrit open-source project, like Google and Digital.it.\n\nAs GerritForge, we never needed to introduce it, as 100% of the code we run is open-source, except the private keys and secrets, of course :-)",
      "parentUuid": "9c11056a_9444a6af",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd9286c2_bfb1d3e4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-09T19:13:38Z",
      "side": 1,
      "message": "I have created the follow-up change that introduces integration test that illustrate how AdminApiFactory is swapped in Digital.ai implementation (at least to the extend when it doesn\u0027t require introduction of more terms).",
      "parentUuid": "3256a498_c79dd348",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b63e6c8c_6185b690",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-12T00:36:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fd9286c2_bfb1d3e4",
      "range": {
        "startLine": 191,
        "startChar": 16,
        "endLine": 191,
        "endChar": 27
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a68d75e0_d12e5605",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 220,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-11-06T08:24:05Z",
      "side": 1,
      "message": "A more generalized description perhaps.\nThe fact that digital is using it is obvious from the @UsedAt annotation but it\u0027s in no way limited to digital, other installations might find this useful.\nSomething like:\n\nOverride this method to inject a custom implementation of AdminApiFactory. This makes it possible to perform admin tasks (such as f.i. delete project) through protocols other than plain SSH.",
      "range": {
        "startLine": 219,
        "startChar": 5,
        "endLine": 220,
        "endChar": 36
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d37d68f_580a433c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 220,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-09T19:13:38Z",
      "side": 1,
      "message": "Good point. Used your suggestion to give the idea what can be done with it. I have also left the sentence describing on how it is used in CollabNet to give a practical example.",
      "parentUuid": "a68d75e0_d12e5605",
      "range": {
        "startLine": 219,
        "startChar": 5,
        "endLine": 220,
        "endChar": 36
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14374d35_20ea944d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-05T22:05:18Z",
      "side": 1,
      "message": "Nit: should this be DIGITALAI?",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e2ca4d3_14a35e67",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-05T22:29:35Z",
      "side": 1,
      "message": "I wasn\u0027t sure it if is worth changing as enum is used in both core and plugins... I can issue a change to core that straightens it and apply it to all affected plugins though...",
      "parentUuid": "14374d35_20ea944d",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "131509cf_e9f214dd",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-05T22:36:57Z",
      "side": 1,
      "message": "Ack, possibly in master?",
      "parentUuid": "2e2ca4d3_14a35e67",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46476943_ddb1ab6b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-06T19:35:15Z",
      "side": 1,
      "message": "I support the idea of having ways of extending the plugin, and I don\u0027t want you to have to annotate things to do so, which is mostly why I am asking about how you are using this. We have done some crazy stuff with our plugins, and making plugins use other plugins. Most of the help we have needed for that has been upstreamed, but there are some things we still can\u0027t do. Registering DynamicItems from a plugin so that another plugin could bind an alternate version of that item, is something that I have been wanting to be able to do and that I have not figured out how to do yet. If there were such a mechanism in core, would that prevent the need for this?",
      "parentUuid": "131509cf_e9f214dd",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47644c88_8510e848",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-06T20:10:59Z",
      "side": 1,
      "message": "\u003e I support the idea of having ways of extending the plugin, and I don\u0027t want you to have to annotate things to do so, which is mostly why I am asking about how you are using this. We have done some crazy stuff with our plugins, and making plugins use other plugins. Most of the help we have needed for that has been upstreamed, but there are some things we still can\u0027t do. Registering DynamicItems from a plugin so that another plugin could bind an alternate version of that item, is something that I have been wanting to be able to do and that I have not figured out how to do yet.\n\nWe do that already, in the multi-site plugin: the replication plugin defines a DynamicItem that the multi-site plugin populates with an implementation.\n\n\u003e If there were such a mechanism in core, would that prevent the need for this?\n\nYou do not need to change Gerrit core to do that.",
      "parentUuid": "46476943_ddb1ab6b",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c51ae29a_9b8ebffc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-11-06T21:09:55Z",
      "side": 1,
      "message": "Does that mechanism make use of this feature https://gerrit-review.googlesource.com/c/gerrit/+/91605 ?",
      "parentUuid": "47644c88_8510e848",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ac44b17_5a4d13a6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-06T21:31:21Z",
      "side": 1,
      "message": "Yep, and it is documented at:\nhttps://gerrit.googlesource.com/plugins/replication/+/refs/heads/master/src/main/resources/Documentation/extension-point.md",
      "parentUuid": "c51ae29a_9b8ebffc",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d089098_c85f8913",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-09T19:13:38Z",
      "side": 1,
      "message": "I agree that DynamicItem is typically a way to solve this puzzle but IMHO in this case it is hard to be achieved for multiple reasons:\n1. Destination contains a lot of logic that would be nice to re-use if general idea of the extension is the same - hence Destination override would make sense\n2. once the Destination is created one has no access to the child injector that is used for the AdminApiFactory binding definition - one would have to provide alternate configuration with all dependencies (including thread scoper etc.) in order to satisfy DI for sth remotely similar to GerritSshApi...",
      "parentUuid": "8ac44b17_5a4d13a6",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b5f7ae5_f33f963c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-12T00:36:27Z",
      "side": 1,
      "message": "1. Reusing the logic (aka implementation) would lead your extension to be very fragile across releases and having to adapt over and over again. Sometimes a bit of code duplication is useful, so that you can rely on interfaces rather than implementation behaviour.\n\n2. You can also define *your* remotes and then it\u0027s up to you to define the injections you need.",
      "parentUuid": "6d089098_c85f8913",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10096ae0_004fe0d9",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/Destination.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-11-12T08:45:02Z",
      "side": 1,
      "message": "1. It is fragile in a good way ;) in a sense that it fails fast when plugin changes either during the rebase or shortly after when we call internal integration tests and since we have thin layer of 8 commits over the upstream it is not a hard work to fix it (btw: we automated rebases and call it periodically)\n\n2. I can\u0027t see it being practical as Destination is a key component of replication plugin so one either uses it or writes its own plugin from scratch...",
      "parentUuid": "9b5f7ae5_f33f963c",
      "range": {
        "startLine": 222,
        "startChar": 25,
        "endLine": 222,
        "endChar": 34
      },
      "revId": "dfe4f63bf4f064b54cdda3a345e5df3f86e79e1d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}