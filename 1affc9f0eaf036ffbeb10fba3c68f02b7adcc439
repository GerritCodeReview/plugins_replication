{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c5648661_fb76a44f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-12T17:12:07Z",
      "side": 1,
      "message": "I think you should explain here what the `FanoutConfigResource` is, in a short, succint way. You actually do that towards the end, with a pretty good level of detail, but it\u0027s not immediately obvious. Something like \"The FanoutConfigResource essentially allows to assemble the final replication config from multiple remote configs, no matter where they reside.\"",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a103b4a0_5f15c9ef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-12T17:54:37Z",
      "side": 1,
      "message": "my assumption was, as the \"fanout configuration\" is not a new feature, it\u0027s already known what it does and doesn\u0027t need too much explanation. Overall this is change is moving that feature one abstraction layer down, as it\u0027s not part of the `ReplicationConfig` but the `ConfigResource`.\n\n\u003e Something like \"The FanoutConfigResource essentially allows to assemble the final replication config from multiple remote configs, no matter where they reside.\"\n\nthis sounds good, will update the commit message as suggested.",
      "parentUuid": "c5648661_fb76a44f",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d83861e3_02010fdf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-27T13:29:46Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a103b4a0_5f15c9ef",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0159b10c_c3366f98",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-12T17:12:07Z",
      "side": 1,
      "message": "Actually, I would rephrase this:\nThe \"fanout\" replication configuration ignores any `remote` sections from the `replication.config` in favour of one remote section per file for all files located in the `replication/` directory.",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d28924df_9b329a21",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-12T17:12:07Z",
      "side": 1,
      "message": "nit: remote",
      "range": {
        "startLine": 12,
        "startChar": 50,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e16d495b_5145f136",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-12T17:54:37Z",
      "side": 1,
      "message": "the main objective of this change is not to introduce the \"fanout\" replication configuration, only to move it to the lower abstraction level. Sure I can update the commit message, but let\u0027s remember that the \"fanout\" was already supported.",
      "parentUuid": "0159b10c_c3366f98",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "415be638_48e6f0b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-12T18:40:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d28924df_9b329a21",
      "range": {
        "startLine": 12,
        "startChar": 50,
        "endLine": 12,
        "endChar": 57
      },
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d22e2f87_aab38869",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-27T13:29:46Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e16d495b_5145f136",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1590cd99_d2eab040",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-12T17:12:07Z",
      "side": 1,
      "message": "nit: the final config",
      "range": {
        "startLine": 16,
        "startChar": 37,
        "endLine": 16,
        "endChar": 54
      },
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6853572c_96b3fc71",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-12T18:40:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1590cd99_d2eab040",
      "range": {
        "startLine": 16,
        "startChar": 37,
        "endLine": 16,
        "endChar": 54
      },
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e43ef2f8_3eec0115",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-12T17:12:07Z",
      "side": 1,
      "message": "nit: by the",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 11
      },
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63321cb6_d3d80382",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-12T18:40:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e43ef2f8_3eec0115",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 11
      },
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf1772f4_8d27357d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-12T17:12:07Z",
      "side": 1,
      "message": "nit: simplifies",
      "range": {
        "startLine": 24,
        "startChar": 44,
        "endLine": 24,
        "endChar": 52
      },
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a02485a8_245f32ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-12T18:40:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf1772f4_8d27357d",
      "range": {
        "startLine": 24,
        "startChar": 44,
        "endLine": 24,
        "endChar": 52
      },
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b10cad6_42534e1b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-12T17:12:07Z",
      "side": 1,
      "message": "This is surprising to me. I would expect `FanoutConfigResource` to extend `ConfigResource`, why is it bound to file-based implementations? Unless we are saying that we absolutely rely on the presence of the `replication/` directory in order to infer usage of the fanout approach, and that the fanout approach does not make sense unless its file based. But then, why do we need the change in the first place?\n\nTL;DR: I think the `FanoutConfigResource` should be an abstraction, an interface, that extends the ConfigResource. And then the FanoutReplicationConfig (maybe with a different name) becomes a (file-based) implementation of that FanoutConfigResource. WDYT?",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ea09c16_11d692e6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-12T17:54:37Z",
      "side": 1,
      "message": "\u003e This is surprising to me. I would expect FanoutConfigResource to extend ConfigResource, why is it bound to file-based implementations? \n\nBecause we need to read the `replication.config` file anyway and merge it with the \"fanout\" remote configurations. \n\n\u003e Unless we are saying that we absolutely rely on the presence of the replication/ directory in order to infer usage of the fanout approach\n\nThis is exactly how \"fanout\" replication is implemented. See the log message in `FanoutConfigResource` L68\n\n\u003e TL;DR: I think the FanoutConfigResource should be an abstraction, an interface, that extends the ConfigResource. And then the FanoutReplicationConfig (maybe with a different name) becomes a (file-based) implementation of that FanoutConfigResource. WDYT?\n\nIMO, this would result in a more complex design and more code duplication. As you\u0027d have two classes for the \"fanout\" implementation (the _resource_ and _replication config_). You\u0027d also use the same section names and keys in the `FanoutReplicationConfig` as in `FileBasedReplicationConfig`.\n\nWith the current approach, we don\u0027t prescribe how the `Config` object is constructed. It can be based on a single file (`replication.config`), it can use multiple files (aka \"fanout\" or \"file per section\" approach), and it can get all or part of the options from ZooKeeper.\n\nWhat\u0027s else, we can easily merge different resources (like `git config` does with system, user and repo configuration).",
      "parentUuid": "9b10cad6_42534e1b",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07316555_51766637",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2023-12-14T09:37:35Z",
      "side": 1,
      "message": "I support the effort of Christoforos here to reach an as simple as possible design. I believe we all agree that the support for different sources of the ConfigResource shall go into the implementation(s) of that interface and that it must not be replicated in the implementation(s) of the ReplicationConfig interface. Basically, in the end we only need one, or two, implementations of the ReplicationConfig interface: one depending on ConfigResource and one as a wrapper of itself, to support auto-reload feature.",
      "parentUuid": "2ea09c16_11d692e6",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e979a2fe_83187420",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-20T10:21:06Z",
      "side": 1,
      "message": "I believe this is what we have right now. The naming is probably a bit off, as the `ConfigResourceBasedReplicationConfig` is the \"non-reloadable\" version of the configuration file and, `AutoReloadCondifDecorator` is the \"reloadable\" version.\n\nIMO, we can rename `ConfigResourceBasedReplicationConfig` to something like `DefaultReplicationConfig` or `StaticReplicationConfig` or `CachedReplicationConfig` or `ReplicationConfigSnapshot` ... don\u0027t know, naming things is hard 😐",
      "parentUuid": "07316555_51766637",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d01db0b_162d6b25",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-27T13:29:46Z",
      "side": 1,
      "message": "\u003e This is exactly how \"fanout\" replication is implemented. See the log message in FanoutConfigResource L68\n\nThis is how \"fanout\" replication was implemented, prior to introducing the concept of the config residing _externally_. If someone wants to scatter their replication config in non-filebased repositories, which is a perfectly valid example of what a fanout strategy should support, why shouldn\u0027t they be able to do so?\n\n\u003e IMO, this would result in a more complex design and more code duplication.\n\nNot necessarily, depends on how you code it I guess. You could have the `FanoutConfigResource` defined as an interface or abstract class, with the `FanoutReplicationConfig` being a concrete (file-based) implementation. Modelling this in the right way is more important IMO.",
      "parentUuid": "e979a2fe_83187420",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdbfc380_3b4475a5",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-27T21:17:22Z",
      "side": 1,
      "message": "\u003e This is how \"fanout\" replication was implemented, prior to introducing the concept of the config residing externally. If someone wants to scatter their replication config in non-filebased repositories, which is a perfectly valid example of what a fanout strategy should support, why shouldn\u0027t they be able to do so?\n\nThis use case is still supported, even if you want to \"fanout\" to an external system (aka. ZooKeeper).\n\n\u003e Not necessarily, depends on how you code it I guess. You could have the FanoutConfigResource defined as an interface or abstract class, with the FanoutReplicationConfig being a concrete (file-based) implementation. Modelling this in the right way is more important IMO.\n\nHave a look at the `FileBasedReplicationConfig` and `FanoutBasedReplicationConfig` and how much of the code duplication they both had. Both were extracting the same configuration values to be compatible with each other.\n\nWith the `ConfigResource` we separate the \"storage\" from the \"schema\". The \"schema\" is defined in the documentation (by the sections, subsections and options) and then implemented in `ReplicationConfig`. Below that we have a JGit `Config` with _verison_, you can fill that `Config` object however you want, and then `ReplicationConfig` would extract configuration options according to the plugin documentation.\n\nWe preserve all of the features of the current configuration of the replication plugin and give an _easy_ way to externalise the configuration options.",
      "parentUuid": "3d01db0b_162d6b25",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddc6b3fe_ade47879",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-12-28T10:40:08Z",
      "side": 1,
      "message": "Maybe its me but I don\u0027t see how eg a ZK fanout is easily supported. How can it be when the `FanoutConfigResource` is just the old fanout implementation (albeit with a bit of refactoring) which is a file-based implementation?",
      "parentUuid": "bdbfc380_3b4475a5",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05fed4de_95cfb52e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-28T13:35:23Z",
      "side": 1,
      "message": "\u003e Maybe its me but I don\u0027t see how eg a ZK fanout is easily supported.\n\nI don\u0027t see it either, the \"fanout\" is specific for the file-based configuration. ZK is a separate data source and I\u0027d keep it like that.\n\nHaving said that, I can imagine `ComplexConfigResource` implementation, that would mix the local `replication.config`, \"fanout\", ZK, `etcd` etc. The thing with `ConfigResource` is that it can be implemented in any way one like. It can mix local files, and remote services or even have logic when to choose which source (albeit, I\u0027d prefer it to be as simple as possible). As long as it gives us JGit `Config` and a _version_, we don\u0027t care.\n\nIMO, we can simplify the \"local file-based\" configuration, drop separate implementations for a \"single file\" and \"fanout\", simplify the Guice bindings, and have one `LocalFileConfigResource` that will deal with both... but this is something for another change, let\u0027s not get distracted too much ;)",
      "parentUuid": "ddc6b3fe_ade47879",
      "revId": "1affc9f0eaf036ffbeb10fba3c68f02b7adcc439",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}