{
  "comments": [
    {
      "key": {
        "uuid": "feed925b_b1e6023a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-09-26T12:58:30Z",
      "side": 1,
      "message": "It was also possible in stable-2.1x just we agreed not to do that\nrefactoring in the old releases. I would avoid mentioning branch\nname here.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 13
      },
      "revId": "c7bb2deab8da9e9b9cbf4f83f16580ae2b574ca4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36570119_6506c81f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-09-27T10:03:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "feed925b_b1e6023a",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 13
      },
      "revId": "c7bb2deab8da9e9b9cbf4f83f16580ae2b574ca4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41b3be24_19f88b03",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-09-26T12:58:30Z",
      "side": 1,
      "message": "If we create a thread safe set here:\n\n  new Collections.newSetFromMap(new ConcurrentHashMap\u003c\u003e())\n\nthen we do not need to synchronize access to the set and we get much better concurrency\nas described in [1]\n\n[1] https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html",
      "range": {
        "startLine": 71,
        "startChar": 29,
        "endLine": 71,
        "endChar": 50
      },
      "revId": "c7bb2deab8da9e9b9cbf4f83f16580ae2b574ca4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4e633f2_cefccbf3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-09-27T10:03:12Z",
      "side": 1,
      "message": "I already mentioned that in different comment:\n\"Following Luca\u0027s comment:\n\"Fair enough, however in the replication plugin we typically synchronise all the incoming queueing. Having a synchronized() block would be good enough and won\u0027t be worse than the current concurrency we have at the moment.\"\n\nI\u0027ve decided to use synchronizedSet instead of ConcurrentHashSet so we are following replication plugin common pattern. Please let me know if this is not the way we want to progress(I prefer ConcurrentHashSet :-))\"\n\nI prefer to use ConcurrentHashSet instead of synchronized blocks but I understand Luca\u0027s point of veiw that we don\u0027t want to confuse people with different approach. @Luca @Sa≈°a we need to agree which way we want to go and I\u0027m happy to follow",
      "parentUuid": "41b3be24_19f88b03",
      "range": {
        "startLine": 71,
        "startChar": 29,
        "endLine": 71,
        "endChar": 50
      },
      "revId": "c7bb2deab8da9e9b9cbf4f83f16580ae2b574ca4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df29b2e6_f8154bb6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-09-27T10:35:26Z",
      "side": 1,
      "message": "See my other comment on the synchronized block: this isn\u0027t only to make a thread-safe addition to the set but also to make sure that we do not even start add stuff if we are in the middle of replaying.",
      "parentUuid": "b4e633f2_cefccbf3",
      "range": {
        "startLine": 71,
        "startChar": 29,
        "endLine": 71,
        "endChar": 50
      },
      "revId": "c7bb2deab8da9e9b9cbf4f83f16580ae2b574ca4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a01b991_bda4975a",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-09-26T12:58:30Z",
      "side": 1,
      "message": "As discussed in another review and if already doing a proper refactoring, then we do\nnot want to call the onGitReferenceUpdated form here, because we know that\nrunning \u003d\u003d true at this point and we do not need that part of the onGitReferenceUpdated\nmethod which checks for the running flag and populates the beforeStartupEventsSet...\n\nI propose to extract a new method out of the onGitReferenceUpdated method which just\nschedules the replication without testing the running flag.",
      "revId": "c7bb2deab8da9e9b9cbf4f83f16580ae2b574ca4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bb61534_05542791",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-09-27T10:03:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a01b991_bda4975a",
      "revId": "c7bb2deab8da9e9b9cbf4f83f16580ae2b574ca4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}