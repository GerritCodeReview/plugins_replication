{
  "comments": [
    {
      "key": {
        "uuid": "c1228989_e5ef7630",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PatchSetReplicatedEvent.java",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-10T12:43:41Z",
      "side": 1,
      "message": "This is quite verbose. Why not generate the status string from the enum name:\n\n  return status.name().toLowerCase().replace(\"_\", \"-\");",
      "range": {
        "startLine": 35,
        "startChar": 1,
        "endLine": 41,
        "endChar": 31
      },
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3598d0_72e0d844",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PatchSetReplicatedEvent.java",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1228989_e5ef7630",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1228989_05f572fd",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PatchSetReplicatedEvent.java",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-10T12:43:41Z",
      "side": 1,
      "message": "What is the purpose of the \"unknown\" here? Why is it better than status.name()?",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3aa4c5_71e0d844",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PatchSetReplicatedEvent.java",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "We use the above suggested code, remove this line now.",
      "parentUuid": "c1228989_05f572fd",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1c11554_b4f1c012",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2013-10-07T15:07:25Z",
      "side": 1,
      "message": "Why use a map? Maybe I am wrong but everytime a git reference is updated, a ReplicationState is created and it contains a GitUpdateProcessing. So a git update processing is only processing for one ref so we do not need a map.",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1778d7c_76fc10e8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2013-10-10T15:18:02Z",
      "side": 1,
      "message": "Forget my comment, I saw that the same ReplicationState can be called for multiple ref",
      "parentUuid": "a1c11554_b4f1c012",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3598d0_52e5d452",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "Yes, it can have multiple ref.",
      "parentUuid": "e1778d7c_76fc10e8",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c174497d_3519b08e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-10T12:43:41Z",
      "side": 1,
      "message": "What about the replication of other references (refs/heads/*, ...) ?\n\nDo you want to have: PatchSetReplicatedEvent and BranchReplicatedEvent as two different kinds of events? Does it make more sense to have only one event type: RefReplicatedEvent? The replication plugin should probably try to stay neutral to all different reference types in Gerrit core... therefore, I would propose to have only RefReplicatedEvent.",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1778d7c_36f29816",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2013-10-10T13:28:54Z",
      "side": 1,
      "message": "I think the same thing, I will upload a new patch set soon",
      "parentUuid": "c174497d_3519b08e",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1778d7c_9607ec2f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2013-10-10T15:18:02Z",
      "side": 1,
      "message": "There is a problem to send stream event for any ref that is replicated. Sending stream event requires a associated change so it is not currently possible to send refReplicatedEvent for a ref that as not associated with a change.\n\nWe could add a method in ChangeHooks to post a streamEvent that do not require a change and bypass the validation for change visibility, Any suggestion regarding this issue?",
      "parentUuid": "e1778d7c_36f29816",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3598d0_32ea5023",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "Patchset has more validation conditions than the normal branch ref, so we deal with them differently, if we need to send event for normal branch ref replication, we can add another patch to do it using the ChangeHooks.postEvent(Branch.NameKey branchName, ChangeEvent event), this method doesn\u0027t require a change, just require a branch name.",
      "parentUuid": "e1778d7c_9607ec2f",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3aa4c5_b1a1a0ec",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-11T13:48:41Z",
      "side": 1,
      "message": "\u003e Any suggestion regarding this issue?\n\nMaybe stream event should be extended to support that events without an associated change can be streamed?\n\nThe replication plugin listens on the GitReferenceUpdated event (means on ANY reference) and, for me, it makes sense that it also posts events for ANY reference.",
      "parentUuid": "e1778d7c_9607ec2f",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1228989_65fc66e8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-10T12:43:41Z",
      "side": 1,
      "message": "Maybe I am missing something important but couldn\u0027t this be just as simple as:\n\n  void onOneNodeReplicated(String project, String ref, URIish uri,\n        RefPushResult status) {\n    postEvent(loadChange(ref), new PatchSetReplicatedEvent(...))\n  }\n\nIt looks to me like you are trying to collect the data for the onAllNodesReplicated?",
      "range": {
        "startLine": 135,
        "startChar": 1,
        "endLine": 146,
        "endChar": 5
      },
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3598d0_12ef4c33",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "yes, this method needs to collent data for onAllNodesReplicated, because maybe there are several ref replications that trigger the same onAllNodesReplicated.",
      "parentUuid": "c1228989_65fc66e8",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1228989_a50c9e54",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-10T12:43:41Z",
      "side": 1,
      "message": "It looks like the necessity for updateReplicationInfo and setChangeInfo and all this data collecting is because you need that data in this method in order to fire the event?\n\nWhat about passing the necessary data (project, ref, uri) to the onAllNodesUpdated method? This would almost completely eliminate the complexity here. This method could then be as simple as:\n\n  void onAllNodesReplicated(int totalPushTasksCount) {\n    postEvent(loadChange(ref), new PatchSetReplicationDoneEvent(project, ref, totalPushTasksCount));\n  }",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 162,
        "endChar": 5
      },
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a171158e_14f594fd",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2013-10-10T15:18:02Z",
      "side": 1,
      "message": "totalPushTasksCount can be the count for more that one ref, so this data collecting is required to be able to send a stream event when replication to all node is completed for a specific ref.",
      "parentUuid": "c1228989_a50c9e54",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3598d0_f2f3a819",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "yes, it maybe for more than one ref.",
      "parentUuid": "a171158e_14f594fd",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3598d0_929e9caa",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-11T13:48:41Z",
      "side": 1,
      "message": "\u003e totalPushTasksCount can be the count for more that one ref\n\nTechnically correct. However, I think we never pass more than one Update for one Event and we could change that API. I will try that.\n\nIf we look at the place where the GitReferenceUpdated event is fired (GitReferenceUpdated:58):\n\n    Event event \u003d new Event(project, ref, o.name(), n.name());\n    for (GitReferenceUpdatedListener l : listeners) {\n      try {\n        l.onGitReferenceUpdated(event);\n      } catch (RuntimeException e) {\n        log.warn(\"Failure in GitReferenceUpdatedListener\", e);\n      }\n    }\n\nand at the Event.getUpdates() (GitReferenceUpdated:88):\n\n    public List\u003cGitReferenceUpdatedListener.Update\u003e getUpdates() {\n      GitReferenceUpdatedListener.Update update \u003d\n          new GitReferenceUpdatedListener.Update() {\n            @Override\n            public String getRefName() {\n              return ref;\n            }\n\n            @Override\n            public String getOldObjectId() {\n              return oldObjectId;\n            }\n\n            @Override\n            public String getNewObjectId() {\n              return newObjectId;\n            }\n          };\n      return ImmutableList.of(update);\n\nI see that we always have only one Update object inside one Event object.",
      "parentUuid": "5e3598d0_f2f3a819",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3aa4c5_51ba74d2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-11T14:54:56Z",
      "side": 1,
      "message": "See:\n\nhttps://gerrit-review.googlesource.com/50782",
      "parentUuid": "5e3598d0_929e9caa",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c174497d_b50ce054",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-10T12:43:41Z",
      "side": 1,
      "message": "nit: looks like we don\u0027t use spaces before and after ++ in our code",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e3aa4c5_51e5d452",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c174497d_b50ce054",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1228989_25f26e16",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-10T12:43:41Z",
      "side": 1,
      "message": "Maybe I am missing something but wasn\u0027t the ref already validated when the patch set was created? Why do we expect an IllegalArgumentException here?",
      "range": {
        "startLine": 187,
        "startChar": 15,
        "endLine": 187,
        "endChar": 39
      },
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3598d0_d2f0a40f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "Yes, we can remove this.",
      "parentUuid": "c1228989_25f26e16",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c174497d_d5015c1b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 200,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-10T12:43:41Z",
      "side": 1,
      "message": "if this is not needed remove this line",
      "range": {
        "startLine": 200,
        "startChar": 10,
        "endLine": 200,
        "endChar": 17
      },
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3598d0_b2fd20e6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 200,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c174497d_d5015c1b",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1228989_8507a22f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-10-10T12:43:41Z",
      "side": 1,
      "message": "Why count when totalPushTaskCount will be passed to the onAllNodesReplicated?",
      "range": {
        "startLine": 228,
        "startChar": 10,
        "endLine": 228,
        "endChar": 15
      },
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e3598d0_92fa1cea",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/PushResultProcessing.java",
        "patchSetId": 2
      },
      "lineNbr": 228,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2013-10-11T06:26:20Z",
      "side": 1,
      "message": "totalPushTaskCount is the total count for all ref.",
      "parentUuid": "c1228989_8507a22f",
      "revId": "c3220b5ec24dbcce455937a2b49a40cba74d9536",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}