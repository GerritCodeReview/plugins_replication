{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5c0db0f8_b1d403d1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-06T08:13:26Z",
      "side": 1,
      "message": "_remotes\u0027_",
      "range": {
        "startLine": 7,
        "startChar": 21,
        "endLine": 7,
        "endChar": 28
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4cda4ab_8a972ad8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-06T08:51:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c0db0f8_b1d403d1",
      "range": {
        "startLine": 7,
        "startChar": 21,
        "endLine": 7,
        "endChar": 28
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66fb702f_fe9f027b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-06T08:13:26Z",
      "side": 1,
      "message": "_and where_",
      "range": {
        "startLine": 17,
        "startChar": 13,
        "endLine": 17,
        "endChar": 18
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "603a9991_6283cac0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-06T08:51:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66fb702f_fe9f027b",
      "range": {
        "startLine": 17,
        "startChar": 13,
        "endLine": 17,
        "endChar": 18
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2505719_69e1fbb4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-06T08:13:26Z",
      "side": 1,
      "message": "Good stuff @dariusz.luksza@gmail.com",
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87159ae2_072449c7",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-06T08:13:26Z",
      "side": 1,
      "message": "```suggestion\n   * Update, fully or partially, the configuration resource.\n```",
      "range": {
        "startLine": 41,
        "startChar": 5,
        "endLine": 41,
        "endChar": 30
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9715502e_8274b22d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-06T08:51:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87159ae2_072449c7",
      "range": {
        "startLine": 41,
        "startChar": 5,
        "endLine": 41,
        "endChar": 30
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ad3d216_a6a491d4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-06T08:46:52Z",
      "side": 1,
      "message": "s/pay/will/",
      "range": {
        "startLine": 44,
        "startChar": 78,
        "endLine": 44,
        "endChar": 81
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9422b51_08cf88cf",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-06T08:51:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ad3d216_a6a491d4",
      "range": {
        "startLine": 44,
        "startChar": 78,
        "endLine": 44,
        "endChar": 81
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f955cee_e93c7a7f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-06T08:13:26Z",
      "side": 1,
      "message": "Although these details could be informative, do they change anything in the way the client would call this API? If not, consider removing it, if yes, feel free to leave them inside.",
      "range": {
        "startLine": 45,
        "startChar": 39,
        "endLine": 47,
        "endChar": 69
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9eeb9340_065dfb7c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-06T08:51:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f955cee_e93c7a7f",
      "range": {
        "startLine": 45,
        "startChar": 39,
        "endLine": 47,
        "endChar": 69
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35fae142_a33b953e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-06T08:13:26Z",
      "side": 1,
      "message": "I believe we should leave this exception going through the caller: if we update an invalid configuration, the update operation should fail IMHO.",
      "range": {
        "startLine": 76,
        "startChar": 10,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ad4d763_25f81770",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-06T08:46:52Z",
      "side": 1,
      "message": "That was my initial idea as well, to just include `ConfigInvalidException` in the `update()` signature. But in this case, it\u0027s an implementation detail that it was unable to parse config file. Also, the implementation may not deal with git config files and this `ConfigInvalidException` kinda doesn\u0027t make sense.\n\nThat\u0027s why the `config()` declares only `IOException` in its signature. We can wrap `ConfigInvalidException` into the `IOException` and bubble it this way. But this then would create an \"unrecoverable error\" that would require someone to manually fix it on the server file system.\n\nFor that reason, I\u0027ve decided to just log the exception and override the config, which now TBH sounds too harsh and can lead to other types of problems, especially when we only \"patch\" the config file.\n\nIf we do rethrow here, we may end up in an inconsistent state, where _some_ remotes are updated and others are not. Depending on the \"API consumer implementation\" this may lead to potential \"configuration loss\" if the consumer doesn\u0027t retry the operation or temporarily persist configuration data or verify what was saved.\n\nWDYT?",
      "parentUuid": "35fae142_a33b953e",
      "range": {
        "startLine": 76,
        "startChar": 10,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dca8fff7_eb9fb64b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FanoutConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-12T00:24:18Z",
      "side": 1,
      "message": "If we just overwrite an invalid configuration, that is still acceptable but needs to be documented in the Javadoc.\n\nThinking aloud, I believe the caller should decide what to do in that situation and, if requested, overwrite it.\n\nWhat about an extra option that decides what to do in case of invalid existing configuraiton?\n- Fail\n- Overwrite",
      "parentUuid": "2ad4d763_25f81770",
      "range": {
        "startLine": 76,
        "startChar": 10,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a9a246f_0fa6da84",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FileConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-06T08:13:26Z",
      "side": 1,
      "message": "What is the rationale of returning a new empty config?",
      "range": {
        "startLine": 75,
        "startChar": 11,
        "endLine": 75,
        "endChar": 23
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df6c899c_bacc6b3f",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/FileConfigResource.java",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-06T08:46:52Z",
      "side": 1,
      "message": "This is a part of the `update` method contract to return `Config` object with options that were not persisted.\n\nAs the `FileConfigResource` is the last layer of config files, we always persist all options in it. To fulfil the API contract, we return an empty `Config` object.\n\nPotentially we can return `null`, but returning _empty objects_ is sell error-prone and does not require additional `if` statements for handling (unnecessary) corner cases. Sure, this can be potentially a private static member, but as it\u0027s mutable I prefer to just create it on the spot and return it, creating objects in JVM is _cheap_ so this should not be a problem.\n\nWDYT?",
      "parentUuid": "3a9a246f_0fa6da84",
      "range": {
        "startLine": 75,
        "startChar": 11,
        "endLine": 75,
        "endChar": 23
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17e39dbf_3aaf2b3c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationRemotesUpdater.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-06T08:13:26Z",
      "side": 1,
      "message": "AFAIK we are planning to use it with the GitHub plugin at the moment.",
      "range": {
        "startLine": 32,
        "startChar": 8,
        "endLine": 32,
        "endChar": 19
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac4598b5_366d97a1",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationRemotesUpdater.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2024-02-06T08:46:52Z",
      "side": 1,
      "message": "The `UsedAt.Project` enum doesn\u0027t have a `github` option, adding it would require a change in Gerrit core which will only be then used in the `replication` plugin (so probably it would also require a `@UsedAt` annotation).\n\nYes, we do intend to use this API from the `github` plugin, but it\u0027s not specific to `github`.\n\nAlso, on second though, this annotation has a different intention, as it should mark APIs that need to be exposed for other plugins to work. Here we just marking an API to be a _public_ API. If we go this route, we should also mark the `ReplicationConfigOverrides` interface with `@UsedAt`.",
      "parentUuid": "17e39dbf_3aaf2b3c",
      "range": {
        "startLine": 32,
        "startChar": 8,
        "endLine": 32,
        "endChar": 19
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d3ad196_804787ca",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationRemotesUpdater.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-02-12T00:24:18Z",
      "side": 1,
      "message": "\u003e The `UsedAt.Project` enum doesn\u0027t have a `github` option, adding it would require a change in Gerrit core which will only be then used in the `replication` plugin (so probably it would also require a `@UsedAt` annotation).\n\nMakes sense, can we add the `github` option in core?\n\n\u003e Yes, we do intend to use this API from the `github` plugin, but it\u0027s not specific to `github`.\n\nSure, but `@UsedAt` means who is using it, outside Gerrit, for preventing its removal, not who _will potentially_ use it in the future.\n\n\u003e Also, on second though, this annotation has a different intention, as it should mark APIs that need to be exposed for other plugins to work. Here we just marking an API to be a _public_ API. If we go this route, we should also mark the `ReplicationConfigOverrides` interface with `@UsedAt`.\n\nTrue.",
      "parentUuid": "ac4598b5_366d97a1",
      "range": {
        "startLine": 32,
        "startChar": 8,
        "endLine": 32,
        "endChar": 19
      },
      "revId": "a35e4abf385af522cb5110dd521daded590493d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}